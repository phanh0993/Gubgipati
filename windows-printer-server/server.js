const express = require('express');
const cors = require('cors');
const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs');
const path = require('path');

const execAsync = promisify(exec);
const app = express();
const PORT = 9977;

// Middleware
app.use(cors());
app.use(express.json());

// Utility functions
const sendJSON = (res, status, data) => {
  res.status(status).json(data);
};

// Qu√©t m√°y in t·ª´ Windows
app.post('/printers/scan', async (req, res) => {
  try {
    console.log('üîç Scanning Windows printers...');
    
    // S·ª≠ d·ª•ng PowerShell ƒë·ªÉ l·∫•y danh s√°ch m√°y in
    const { stdout } = await execAsync('powershell "Get-Printer | Select-Object Name, DriverName, PortName, PrinterStatus | ConvertTo-Json"');
    
    const printerList = JSON.parse(stdout);
    
    const printers = printerList.map((printer, index) => ({
      id: `printer_${index}`,
      name: printer.Name,
      driver: printer.DriverName,
      port: printer.PortName,
      status: printer.PrinterStatus === 'Normal' ? 'ready' : 'error'
    }));
    
    console.log(`‚úÖ Found ${printers.length} Windows printers`);
    sendJSON(res, 200, { printers });
    
  } catch (scanError) {
    console.error('‚ùå Error scanning Windows printers:', scanError);
    sendJSON(res, 500, { 
      error: 'Failed to scan printers', 
      details: scanError.message 
    });
  }
});

// Test in m√°y in
app.post('/printers/test', async (req, res) => {
  try {
    const { printer_name, content } = req.body;
    
    console.log('Test print request:', { printer_name, content });
    
    if (!printer_name || !content) {
      return sendJSON(res, 400, { error: 'Missing printer_name or content' });
    }
    
    console.log(`üñ®Ô∏è Testing print to: ${printer_name}`);
    
    // Ki·ªÉm tra m√°y in c√≥ t·ªìn t·∫°i kh√¥ng
    try {
      const checkCommand = `powershell "Get-Printer -Name '${printer_name}' -ErrorAction Stop"`;
      await execAsync(checkCommand);
      console.log(`‚úÖ Printer ${printer_name} exists`);
    } catch (checkError) {
      console.error(`‚ùå Printer ${printer_name} not found:`, checkError.message);
      return sendJSON(res, 404, { 
        error: `Printer '${printer_name}' not found`,
        details: checkError.message
      });
    }
    
    // T·∫°o file t·∫°m trong th∆∞ m·ª•c temp c·ªßa Windows v·ªõi UTF-8 BOM
    const tempDir = require('os').tmpdir();
    const tempFile = path.join(tempDir, `test_print_${Date.now()}.txt`);
    
    // Ghi file v·ªõi UTF-8 BOM ƒë·ªÉ ƒë·∫£m b·∫£o encoding ƒë√∫ng
    const BOM = '\uFEFF';
    fs.writeFileSync(tempFile, BOM + content, 'utf8');
    
    console.log(`üìÑ Created temp file: ${tempFile}`);
    
    // In file t·∫°m v·ªõi settings t·ªëi ∆∞u cho POS-80C
    const printCommand = `powershell "Get-Content '${tempFile}' -Encoding UTF8 | Out-String -Width 80 | Out-Printer -Name '${printer_name}'"`;
    
    await execAsync(printCommand);
    
    // X√≥a file t·∫°m
    fs.unlinkSync(tempFile);
    console.log(`üóëÔ∏è Deleted temp file: ${tempFile}`);
    
    console.log(`‚úÖ Test print successful to ${printer_name}`);
    sendJSON(res, 200, { 
      message: `Printed to ${printer_name}`, 
      success: true 
    });
    
  } catch (printError) {
    console.error(`‚ùå Test print failed: ${printError.message}`);
    sendJSON(res, 500, { 
      error: `Print failed: ${printError.message}`,
      details: printError.message
    });
  }
});

// In order cho b·∫øp
app.post('/print/kitchen', async (req, res) => {
  try {
    const { order, items, printer_name, template_content } = req.body;
    
    if (!printer_name || !order || !items) {
      return sendJSON(res, 400, { error: 'Missing required fields' });
    }
    
    console.log(`üç≥ Printing kitchen order to: ${printer_name}`);
    
    // Check m√°y in settings tr∆∞·ªõc khi in
    try {
      console.log('üîç Checking printer settings...');
      const printerSettings = await execAsync(`powershell "Get-Printer -Name '${printer_name}' | Select-Object Name, DriverName, PrinterStatus | ConvertTo-Json"`);
      console.log('üìã Current printer settings:', printerSettings.stdout);
      
      // Check paper settings
      const paperSettings = await execAsync(`powershell "Get-WmiObject -Class Win32_Printer -Filter \"Name='${printer_name}'\" | Select-Object DefaultPaperSize"`);
      console.log('üìã Current paper settings:', paperSettings.stdout);
    } catch (checkError) {
      console.log('‚ö†Ô∏è Could not check printer settings:', checkError.message);
    }
    
    // S·ª≠ d·ª•ng template n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng template m·∫∑c ƒë·ªãnh
    let content;
    if (template_content) {
      content = template_content;
    } else {
      // Template m·∫∑c ƒë·ªãnh cho POS-80C (32 k√Ω t·ª±/ƒë∆∞·ªùng)
      content = `BEP - DON HANG
================================
So the: ${order.card_number || order.id}
${new Date().toLocaleString('vi-VN')} - Bep

(Ban) ${order.table_name || order.table_id}
Nhan vien: ${order.staff_name || 'Nhan vien'}
* Ghi chu: ${order.notes || ''}

================================
Mat hang          D.vi SL
================================
`;
      
      items.forEach(item => {
        const itemName = item.name.length > 20 ? item.name.substring(0, 17) + '...' : item.name;
        const quantity = `x${item.quantity}`.padStart(4);
        const price = item.price && item.price > 0 ? `${item.price.toLocaleString('vi-VN')}d` : '0d';
        const priceFormatted = price.padStart(8);
        
        content += `${itemName.padEnd(20)} ${quantity} ${priceFormatted}\n`;
        
        if (item.special_instructions) {
          content += `  Ghi chu: ${item.special_instructions}\n`;
        }
        content += `\n`;
      });
      
      content += `================================\n`;
    }
    
    // Th√™m d√≤ng tr·ªëng ƒë·ªÉ s√°t l√™n tr√™n
    content = `\n\n${content}\n\n\n`;
    
    // Log n·ªôi dung ƒë·ªÉ debug
    console.log('üìÑ Kitchen print content:');
    console.log(content);
    
    // T·∫°o file t·∫°m v√† in v·ªõi encoding UTF-8 v√† settings cho POS-80C
    const tempDir = require('os').tmpdir();
    const tempFile = path.join(tempDir, `kitchen_order_${Date.now()}.txt`);
    
    // Th·ª≠ c√°c c√°ch kh√°c nhau ƒë·ªÉ fix width v√† font size
    try {
      // TƒÉng font size b·∫±ng c√°ch s·ª≠ d·ª•ng text formatting
      // Th√™m ANSI escape codes ƒë·ªÉ in ƒë·∫≠m v√† tƒÉng k√≠ch th∆∞·ªõc
      const formattedContent = content
        .replace(/\*\*(.*?)\*\*/g, '\x1b[1m$1\x1b[0m')  // Bold
        .replace(/##(.*?)##/g, '\x1b[1m\x1b[3m$1\x1b[0m')  // Bold + Large
        .replace(/\*(.*?)\*/g, '\x1b[3m$1\x1b[0m');   // Italic
      
      // UTF-8 BOM v·ªõi formatted content
      const BOM = '\uFEFF';
      fs.writeFileSync(tempFile, BOM + formattedContent, 'utf8');
      console.log('üìÑ Written with UTF-8 BOM + Formatting');
    } catch (error) {
      // Fallback: UTF-8 BOM thu·∫ßn
      const BOM = '\uFEFF';
      fs.writeFileSync(tempFile, BOM + content, 'utf8');
      console.log('üìÑ Written with UTF-8 BOM only');
    }
    
    // S·ª≠ d·ª•ng Out-String -Width ƒë·ªÉ fix width cho POS-80C
    try {
      // Method 1: Out-String v·ªõi Width 80 (ƒë√∫ng syntax PowerShell)
      console.log('üñ®Ô∏è Method 1: Out-String Width 80...');
      const printCommand1 = `powershell "Get-Content '${tempFile}' -Encoding UTF8 | Out-String -Width 80 | Out-Printer -Name '${printer_name}'"`;
      await execAsync(printCommand1);
      console.log('‚úÖ Method 1 successful (Out-String Width 80)');
    } catch (error) {
      console.log('‚ùå Method 1 failed:', error.message);
      try {
        // Method 2: Out-String v·ªõi Width 64  
        console.log('üñ®Ô∏è Method 2: Out-String Width 64...');
        const printCommand2 = `powershell "Get-Content '${tempFile}' -Encoding UTF8 | Out-String -Width 64 | Out-Printer -Name '${printer_name}'"`;
        await execAsync(printCommand2);
        console.log('‚úÖ Method 2 successful (Out-String Width 64)');
      } catch (error2) {
        console.log('‚ùå Method 2 failed:', error2.message);
        try {
          // Method 3: Format-Wide ƒë·ªÉ force width
          console.log('üñ®Ô∏è Method 3: Format-Wide...');
          const printCommand3 = `powershell "Get-Content '${tempFile}' -Encoding UTF8 | Format-Wide -Column 4 | Out-Printer -Name '${printer_name}'"`;
          await execAsync(printCommand3);
          console.log('‚úÖ Method 3 successful (Format-Wide)');
        } catch (error3) {
          console.log('‚ùå Method 3 failed:', error3.message);
          try {
            // Method 4: Set m√°y in default width b·∫±ng registry
            console.log('üñ®Ô∏è Method 4: Set printer default width...');
            await execAsync(`powershell "reg add 'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows' /v DeviceWidth /t REG_DWORD /d 80 /f"`);
            const printCommand4 = `powershell "Get-Content '${tempFile}' -Encoding UTF8 | Out-Printer -Name '${printer_name}'"`;
            await execAsync(printCommand4);
            console.log('‚úÖ Method 4 successful (Registry width set)');
          } catch (error4) {
            console.log('‚ùå Method 4 failed:', error4.message);
            try {
              // Method 5: Thay ƒë·ªïi console buffer width
              console.log('üñ®Ô∏è Method 5: Console buffer width...');
              await execAsync(`powershell "$Host.UI.RawUI.BufferSize = New-Object System.Management.Automation.Host.Size(120, 50)"`);
              const printCommand5 = `powershell "Get-Content '${tempFile}' -Encoding UTF8 | Out-Printer -Name '${printer_name}'"`;
              await execAsync(printCommand5);
              console.log('‚úÖ Method 5 successful (Console buffer)');
            } catch (error5) {
              console.log('‚ùå Method 5 failed:', error5.message);
              throw error5;
            }
          }
        }
      }
    }
    
    // X√≥a file t·∫°m
    fs.unlinkSync(tempFile);
    
    console.log(`‚úÖ Kitchen order printed to ${printer_name}`);
    sendJSON(res, 200, { 
      message: `Kitchen order printed to ${printer_name}`, 
      success: true 
    });
    
  } catch (error) {
    console.error(`‚ùå Kitchen print failed: ${error.message}`);
    sendJSON(res, 500, { 
      error: `Kitchen print failed: ${error.message}` 
    });
  }
});

// In h√≥a ƒë∆°n
app.post('/print/invoice', async (req, res) => {
  try {
    const { order, items, printer_name } = req.body;
    
    if (!printer_name || !order || !items) {
      return sendJSON(res, 400, { error: 'Missing required fields' });
    }
    
    console.log(`üßæ Printing invoice to: ${printer_name}`);
    
    // T·∫°o n·ªôi dung in h√≥a ƒë∆°n
    let content = `\n`;
    content += `        H√ìA ƒê∆†N THANH TO√ÅN\n`;
    content += `================================\n`;
    content += `ƒê∆°n: ${order.order_number || order.id}\n`;
    content += `B√†n: ${order.table_name || order.table_id}\n`;
    content += `Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}\n`;
    content += `--------------------------------\n`;
    
    let total = 0;
    items.forEach(item => {
      const itemTotal = parseFloat(item.total_price) || (item.price * item.quantity);
      content += `${item.name} x${item.quantity}\n`;
      if (item.special_instructions) {
        content += `  Ghi ch√∫: ${item.special_instructions}\n`;
      }
      content += `${itemTotal.toLocaleString('vi-VN')}ƒë\n\n`;
      total += itemTotal;
    });
    
    content += `--------------------------------\n`;
    content += `T·ªîNG C·ªòNG: ${total.toLocaleString('vi-VN')}ƒë\n`;
    content += `================================\n`;
    content += `    C·∫£m ∆°n qu√Ω kh√°ch!\n`;
    content += `\n\n\n`;
    
    // T·∫°o file t·∫°m v√† in v·ªõi encoding UTF-8 v√† settings cho POS-80C
    const tempDir = require('os').tmpdir();
    const tempFile = path.join(tempDir, `invoice_${Date.now()}.txt`);
    
    // Ghi file v·ªõi UTF-8 BOM ƒë·ªÉ ƒë·∫£m b·∫£o encoding ƒë√∫ng
    const BOM = '\uFEFF';
    fs.writeFileSync(tempFile, BOM + content, 'utf8');
    
    // S·ª≠ d·ª•ng PowerShell v·ªõi settings t·ªëi ∆∞u cho POS-80C
    const printCommand = `powershell "Get-Content '${tempFile}' -Encoding UTF8 -Width 32 | Out-Printer -Name '${printer_name}'"`;
    await execAsync(printCommand);
    
    // X√≥a file t·∫°m
    fs.unlinkSync(tempFile);
    
    console.log(`‚úÖ Invoice printed to ${printer_name}`);
    sendJSON(res, 200, { 
      message: `Invoice printed to ${printer_name}`, 
      success: true 
    });
    
  } catch (error) {
    console.error(`‚ùå Invoice print failed: ${error.message}`);
    sendJSON(res, 500, { 
      error: `Invoice print failed: ${error.message}` 
    });
  }
});

// In ·∫£nh (PNG/JPG) ƒë·ªÉ tr√°nh b·ªã can thi·ªáp ƒë·ªãnh d·∫°ng
app.post('/print/image', async (req, res) => {
  try {
    const { printer_name, image_base64, filename } = req.body || {};
    if (!printer_name || !image_base64) {
      return sendJSON(res, 400, { error: 'Missing printer_name or image_base64' });
    }

    // L∆∞u ·∫£nh t·∫°m
    const tempDir = require('os').tmpdir();
    const safeName = (filename && String(filename).replace(/[^\w\.-]/g, '')) || `image_${Date.now()}.png`;
    const tempFile = path.join(tempDir, safeName.endsWith('.png') || safeName.endsWith('.jpg') || safeName.endsWith('.jpeg') ? safeName : `${safeName}.png`);

    // image_base64 c√≥ th·ªÉ ·ªü d·∫°ng data URL, t√°ch header n·∫øu c√≥
    const base64Data = String(image_base64).includes(',') ? image_base64.split(',')[1] : image_base64;
    const buffer = Buffer.from(base64Data, 'base64');
    fs.writeFileSync(tempFile, buffer);

    console.log(`üñºÔ∏è Saved image for printing: ${tempFile}`);

    // In b·∫±ng MSPaint (·ªïn ƒë·ªãnh, h·ªó tr·ª£ PNG/JPG). Tham s·ªë /pt: print to printer
    // L∆∞u √Ω: n·∫øu h·ªá th·ªëng kh√¥ng c√≥ mspaint trong PATH, g·ªçi full path: %WINDIR%\System32\mspaint.exe
    const mspaint = process.env.WINDIR ? path.join(process.env.WINDIR, 'System32', 'mspaint.exe') : 'mspaint';

    // C√°ch 1: mspaint /pt "file" "printer"
    try {
      console.log('üñ®Ô∏è Printing image via mspaint /pt ...');
      await execAsync(`"${mspaint}" /pt "${tempFile}" "${printer_name}"`);
      console.log('‚úÖ Image printed via mspaint');
    } catch (e1) {
      console.log('‚ùå mspaint method failed, trying PowerShell PrintTo...', e1.message);
      // C√°ch 2: PowerShell Start-Process -Verb PrintTo
      const psCmd = `powershell "Start-Process -FilePath '${tempFile.replace(/'/g, "''")}' -Verb PrintTo -ArgumentList '${printer_name.replace(/'/g, "''")}' -PassThru | Wait-Process -Timeout 20"`;
      await execAsync(psCmd);
      console.log('‚úÖ Image printed via PowerShell PrintTo');
    }

    // X√≥a file t·∫°m
    try { fs.unlinkSync(tempFile); } catch {}
    return sendJSON(res, 200, { success: true, message: 'Image sent to printer' });
  } catch (error) {
    console.error('‚ùå Print image failed:', error.message);
    return sendJSON(res, 500, { error: 'Print image failed', details: error.message });
  }
});

// In PDF ƒë·ªÉ tr√°nh b·ªã can thi·ªáp ƒë·ªãnh d·∫°ng
app.post('/print/pdf', async (req, res) => {
  try {
    const { printer_name, pdf_base64, filename } = req.body || {};
    if (!printer_name || !pdf_base64) {
      return sendJSON(res, 400, { error: 'Missing printer_name or pdf_base64' });
    }

    // L∆∞u PDF t·∫°m
    const tempDir = require('os').tmpdir();
    const safeName = (filename && String(filename).replace(/[^\w\.-]/g, '')) || `doc_${Date.now()}.pdf`;
    const tempFile = path.join(tempDir, safeName.endsWith('.pdf') ? safeName : `${safeName}.pdf`);

    const base64Data = String(pdf_base64).includes(',') ? pdf_base64.split(',')[1] : pdf_base64;
    const buffer = Buffer.from(base64Data, 'base64');
    fs.writeFileSync(tempFile, buffer);
    console.log(`üìÑ Saved PDF for printing: ${tempFile}`);

    // In PDF:
    // ∆Øu ti√™n: PowerShell Start-Process -Verb PrintTo (d√πng app m·∫∑c ƒë·ªãnh c·ªßa h·ªá th·ªëng cho PDF)
    try {
      console.log('üñ®Ô∏è Printing PDF via PowerShell PrintTo ...');
      const psCmd = `powershell "Start-Process -FilePath '${tempFile.replace(/'/g, "''")}' -Verb PrintTo -ArgumentList '${printer_name.replace(/'/g, "''")}' -PassThru | Wait-Process -Timeout 30"`;
      await execAsync(psCmd);
      console.log('‚úÖ PDF printed via PowerShell PrintTo');
    } catch (e1) {
      console.log('‚ùå PowerShell PrintTo failed, trying rundll32...', e1.message);
      // Fallback: s·ª≠ d·ª•ng PrintTo verb qua rundll32 (√≠t ·ªïn ƒë·ªãnh h∆°n)
      // L∆∞u √Ω: rundll32 c·∫ßn app li√™n k·∫øt .pdf (Acrobat/Edge) h·ªó tr·ª£ implicit PrintTo
      const rundll = `rundll32.exe SHELL32.DLL,ShellExec_RunDLL "${tempFile}" /p /h`;
      await execAsync(rundll);
      console.log('‚úÖ PDF printed via rundll32');
    }

    try { fs.unlinkSync(tempFile); } catch {}
    return sendJSON(res, 200, { success: true, message: 'PDF sent to printer' });
  } catch (error) {
    console.error('‚ùå Print PDF failed:', error.message);
    return sendJSON(res, 500, { error: 'Print PDF failed', details: error.message });
  }
});

// Health check
app.get('/health', (req, res) => {
  sendJSON(res, 200, { 
    status: 'OK', 
    message: 'Windows Printer Server is running',
    timestamp: new Date().toISOString()
  });
});

// Root endpoint
app.get('/', (req, res) => {
  sendJSON(res, 200, {
    message: 'Windows Printer Server',
    version: '1.0.0',
    endpoints: {
      'POST /printers/scan': 'Qu√©t m√°y in Windows',
      'POST /printers/test': 'Test in m√°y in',
      'POST /print/kitchen': 'In order cho b·∫øp',
      'POST /print/invoice': 'In h√≥a ƒë∆°n',
      'GET /health': 'Health check'
    }
  });
});

// Error handling
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  sendJSON(res, 500, { 
    error: 'Internal server error',
    details: err.message 
  });
});

// Start server
app.listen(PORT, () => {
  console.log('üöÄ Windows Printer Server started');
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`üåê Server running on port ${PORT}`);
  console.log('üñ®Ô∏è Ready to handle printer requests');
  console.log('');
  console.log('Available endpoints:');
  console.log('  POST /printers/scan - Qu√©t m√°y in Windows');
  console.log('  POST /printers/test - Test in m√°y in');
  console.log('  POST /print/kitchen - In order cho b·∫øp');
  console.log('  POST /print/invoice - In h√≥a ƒë∆°n');
  console.log('  GET /health - Health check');
  console.log('');
  console.log('Press Ctrl+C to stop the server');
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë Shutting down Windows Printer Server...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë Shutting down Windows Printer Server...');
  process.exit(0);
});
