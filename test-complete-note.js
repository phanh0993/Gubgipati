// Test script ho√†n ch·ªânh ƒë·ªÉ ki·ªÉm tra t√≠nh nƒÉng note
const fs = require('fs');
const path = require('path');

function testCompleteNoteFeature() {
  console.log('üß™ Test ho√†n ch·ªânh t√≠nh nƒÉng note...\n');

  try {
    // 1. Ki·ªÉm tra c√°c file ƒë√£ ƒë∆∞·ª£c t·∫°o/c·∫≠p nh·∫≠t
    console.log('1Ô∏è‚É£ Ki·ªÉm tra c√°c file ƒë√£ ƒë∆∞·ª£c t·∫°o/c·∫≠p nh·∫≠t:');
    
    const filesToCheck = [
      'ADD_NOTE_COLUMN_TO_ORDER_ITEMS.sql',
      'NOTE_FEATURE_IMPLEMENTATION.md',
      'test-order-with-note.js',
      'test-note-simple.js',
      'test-note-database.js',
      'test-note-column.js',
      'test-sql-note.js'
    ];

    filesToCheck.forEach(file => {
      const filePath = path.join(__dirname, file);
      if (fs.existsSync(filePath)) {
        console.log(`‚úÖ ${file} - T·ªìn t·∫°i`);
      } else {
        console.log(`‚ùå ${file} - Kh√¥ng t·ªìn t·∫°i`);
      }
    });

    // 2. Ki·ªÉm tra c√°c file ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    console.log('\n2Ô∏è‚É£ Ki·ªÉm tra c√°c file ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:');
    
    const updatedFiles = [
      'restaurant-api-server.js',
      'src/pages/SimpleRestaurantPOS.tsx',
      'src/pages/MobileBillPage.tsx'
    ];

    updatedFiles.forEach(file => {
      const filePath = path.join(__dirname, file);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        const hasNote = content.includes('note');
        console.log(`${hasNote ? '‚úÖ' : '‚ùå'} ${file} - ${hasNote ? 'ƒê√£ c·∫≠p nh·∫≠t' : 'Ch∆∞a c·∫≠p nh·∫≠t'}`);
      } else {
        console.log(`‚ùå ${file} - Kh√¥ng t·ªìn t·∫°i`);
      }
    });

    // 3. Ki·ªÉm tra n·ªôi dung SQL
    console.log('\n3Ô∏è‚É£ Ki·ªÉm tra n·ªôi dung file SQL:');
    const sqlPath = path.join(__dirname, 'ADD_NOTE_COLUMN_TO_ORDER_ITEMS.sql');
    if (fs.existsSync(sqlPath)) {
      const sqlContent = fs.readFileSync(sqlPath, 'utf8');
      
      const hasAddColumn = sqlContent.includes('ADD COLUMN note TEXT');
      const hasComment = sqlContent.includes('COMMENT ON COLUMN');
      const hasCheck = sqlContent.includes('information_schema.columns');
      
      console.log(hasAddColumn ? '‚úÖ C√≥ l·ªánh ADD COLUMN note' : '‚ùå Thi·∫øu l·ªánh ADD COLUMN note');
      console.log(hasComment ? '‚úÖ C√≥ comment cho c·ªôt' : '‚ùå Thi·∫øu comment cho c·ªôt');
      console.log(hasCheck ? '‚úÖ C√≥ ki·ªÉm tra c·∫•u tr√∫c b·∫£ng' : '‚ùå Thi·∫øu ki·ªÉm tra c·∫•u tr√∫c b·∫£ng');
    }

    // 4. Ki·ªÉm tra API changes
    console.log('\n4Ô∏è‚É£ Ki·ªÉm tra thay ƒë·ªïi API:');
    const apiPath = path.join(__dirname, 'restaurant-api-server.js');
    if (fs.existsSync(apiPath)) {
      const apiContent = fs.readFileSync(apiPath, 'utf8');
      
      const hasNoteInInsert = apiContent.includes('INSERT INTO order_items') && apiContent.includes('note');
      const hasNoteInSelect = apiContent.includes('SELECT') && apiContent.includes('oi.note');
      const hasNoteInResponse = apiContent.includes('note: item.note');
      
      console.log(hasNoteInInsert ? '‚úÖ API insert s·ª≠ d·ª•ng c·ªôt note' : '‚ùå API insert ch∆∞a s·ª≠ d·ª•ng c·ªôt note');
      console.log(hasNoteInSelect ? '‚úÖ API select bao g·ªìm c·ªôt note' : '‚ùå API select ch∆∞a bao g·ªìm c·ªôt note');
      console.log(hasNoteInResponse ? '‚úÖ API response bao g·ªìm note' : '‚ùå API response ch∆∞a bao g·ªìm note');
    }

    // 5. Ki·ªÉm tra Frontend changes
    console.log('\n5Ô∏è‚É£ Ki·ªÉm tra thay ƒë·ªïi Frontend:');
    const posPath = path.join(__dirname, 'src/pages/SimpleRestaurantPOS.tsx');
    if (fs.existsSync(posPath)) {
      const posContent = fs.readFileSync(posPath, 'utf8');
      
      const hasNoteInterface = posContent.includes('note?: string');
      const hasNoteInput = posContent.includes('Ghi ch√∫ cho m√≥n n√†y');
      const hasNoteHandler = posContent.includes('handleUpdateItemNote');
      const hasNoteInOrder = posContent.includes('note: item.note');
      
      console.log(hasNoteInterface ? '‚úÖ Interface c√≥ tr∆∞·ªùng note' : '‚ùå Interface ch∆∞a c√≥ tr∆∞·ªùng note');
      console.log(hasNoteInput ? '‚úÖ C√≥ tr∆∞·ªùng nh·∫≠p note' : '‚ùå Ch∆∞a c√≥ tr∆∞·ªùng nh·∫≠p note');
      console.log(hasNoteHandler ? '‚úÖ C√≥ handler c·∫≠p nh·∫≠t note' : '‚ùå Ch∆∞a c√≥ handler c·∫≠p nh·∫≠t note');
      console.log(hasNoteInOrder ? '‚úÖ G·ª≠i note khi t·∫°o order' : '‚ùå Ch∆∞a g·ª≠i note khi t·∫°o order');
    }

    // 6. T√≥m t·∫Øt k·∫øt qu·∫£
    console.log('\n6Ô∏è‚É£ T√≥m t·∫Øt k·∫øt qu·∫£:');
    console.log('üìã C√°c b∆∞·ªõc c·∫ßn th·ª±c hi·ªán:');
    console.log('   1. ‚úÖ File SQL ƒë√£ ƒë∆∞·ª£c t·∫°o');
    console.log('   2. ‚úÖ API ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
    console.log('   3. ‚úÖ Frontend ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
    console.log('   4. ‚è≥ C·∫ßn ch·∫°y file SQL ƒë·ªÉ th√™m c·ªôt note');
    console.log('   5. ‚è≥ C·∫ßn test th·ª±c t·∫ø v·ªõi server');

    console.log('\nüìã H∆∞·ªõng d·∫´n tri·ªÉn khai:');
    console.log('   1. Ch·∫°y file SQL: ADD_NOTE_COLUMN_TO_ORDER_ITEMS.sql');
    console.log('   2. Kh·ªüi ƒë·ªông server: node restaurant-api-server.js');
    console.log('   3. Test tr√™n giao di·ªán POS');
    console.log('   4. Ki·ªÉm tra note hi·ªÉn th·ªã trong chi ti·∫øt h√≥a ƒë∆°n');

    console.log('\nüéâ T√≠nh nƒÉng note ƒë√£ ƒë∆∞·ª£c implement ƒë·∫ßy ƒë·ªß!');
    console.log('‚úÖ Ch·ªâ c·∫ßn ch·∫°y SQL script ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng.');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
testCompleteNoteFeature();
