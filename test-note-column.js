// Test script ƒë·ªÉ ki·ªÉm tra c·ªôt note c√≥ t·ªìn t·∫°i kh√¥ng
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://rmqzggfwvhsoiijlsxwy.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJtcXpnZ2Z3dmhzb2lpamxzeHd5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyODc1MjYsImV4cCI6MjA3MTg2MzUyNn0.EWtnieipmSr5prm18pNCgCYSfdGRtr-710ISCZ-Jsl4';
const supabase = createClient(supabaseUrl, supabaseKey);

async function testNoteColumn() {
  console.log('üß™ Test c·ªôt note trong b·∫£ng order_items...\n');

  try {
    // 1. Th·ª≠ select c·ªôt note ƒë·ªÉ ki·ªÉm tra c√≥ t·ªìn t·∫°i kh√¥ng
    console.log('1Ô∏è‚É£ Ki·ªÉm tra c·ªôt note c√≥ t·ªìn t·∫°i...');
    
    const { data, error } = await supabase
      .from('order_items')
      .select('id, note')
      .limit(1);

    if (error) {
      console.log('‚ùå L·ªói khi select c·ªôt note:', error.message);
      
      if (error.message.includes('note') || error.message.includes('column')) {
        console.log('‚ö†Ô∏è  C·ªôt note ch∆∞a t·ªìn t·∫°i!');
        console.log('üìù Vui l√≤ng ch·∫°y file SQL: ADD_NOTE_COLUMN_TO_ORDER_ITEMS.sql');
        return;
      }
    } else {
      console.log('‚úÖ C·ªôt note ƒë√£ t·ªìn t·∫°i!');
      console.log('üìä K·∫øt qu·∫£ select:', data);
    }

    // 2. Th·ª≠ insert m·ªôt record test v·ªõi note
    console.log('\n2Ô∏è‚É£ Th·ª≠ insert record test v·ªõi note...');
    
    // T·∫°o m·ªôt order test tr∆∞·ªõc
    const { data: orderData, error: orderError } = await supabase
      .from('orders')
      .insert([{
        table_id: 1,
        employee_id: 1,
        order_type: 'dine_in',
        subtotal: 100000,
        tax_amount: 0,
        total_amount: 100000,
        notes: 'Test order',
        status: 'pending'
      }])
      .select();

    if (orderError) {
      console.log('‚ùå L·ªói khi t·∫°o order test:', orderError.message);
      return;
    }

    const testOrderId = orderData[0].id;
    console.log(`‚úÖ T·∫°o order test th√†nh c√¥ng, ID: ${testOrderId}`);

    // Th·ª≠ insert order_item v·ªõi note
    const { data: itemData, error: itemError } = await supabase
      .from('order_items')
      .insert([{
        order_id: testOrderId,
        food_item_id: 1,
        quantity: 1,
        unit_price: 50000,
        total_price: 50000,
        note: 'Test note: Ghi ch√∫ test t·ª´ script'
      }])
      .select();

    if (itemError) {
      console.log('‚ùå L·ªói khi insert order_item:', itemError.message);
      
      // D·ªçn d·∫πp order test
      await supabase.from('orders').delete().eq('id', testOrderId);
      return;
    }

    console.log('‚úÖ Insert order_item v·ªõi note th√†nh c√¥ng!');
    console.log('üìä K·∫øt qu·∫£ insert:', itemData);

    // 3. Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u
    console.log('\n3Ô∏è‚É£ Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u...');
    const { data: checkData, error: checkError } = await supabase
      .from('order_items')
      .select('*')
      .eq('id', itemData[0].id);

    if (checkError) {
      console.log('‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu:', checkError);
    } else {
      console.log('üìã D·ªØ li·ªáu ƒë√£ l∆∞u:');
      console.log('   - ID:', checkData[0].id);
      console.log('   - order_id:', checkData[0].order_id);
      console.log('   - food_item_id:', checkData[0].food_item_id);
      console.log('   - quantity:', checkData[0].quantity);
      console.log('   - unit_price:', checkData[0].unit_price);
      console.log('   - total_price:', checkData[0].total_price);
      console.log('   - note:', `"${checkData[0].note}"`);
      console.log('   - special_instructions:', `"${checkData[0].special_instructions || 'null'}"`);

      // 4. Ki·ªÉm tra k·∫øt qu·∫£
      console.log('\n4Ô∏è‚É£ K·∫øt qu·∫£ test:');
      const hasNote = checkData[0].note === 'Test note: Ghi ch√∫ test t·ª´ script';
      
      if (hasNote) {
        console.log('üéâ Test th√†nh c√¥ng! C·ªôt note ho·∫°t ƒë·ªông ƒë√∫ng.');
        console.log('‚úÖ Note ƒë∆∞·ª£c l∆∞u v√† ƒë·ªçc th√†nh c√¥ng t·ª´ database.');
      } else {
        console.log('‚ö†Ô∏è  Test c√≥ v·∫•n ƒë·ªÅ. Note kh√¥ng kh·ªõp v·ªõi d·ªØ li·ªáu ƒë√£ g·ª≠i.');
      }
    }

    // 5. D·ªçn d·∫πp test data
    console.log('\n5Ô∏è‚É£ D·ªçn d·∫πp test data...');
    await supabase.from('order_items').delete().eq('id', itemData[0].id);
    await supabase.from('orders').delete().eq('id', testOrderId);
    console.log('‚úÖ ƒê√£ x√≥a test data');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
testNoteColumn();
